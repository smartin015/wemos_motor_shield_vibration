
VibrationDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc8  08002dc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dc8  08002dc8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dc8  08002dc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08002ddc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002ddc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc24  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b84  00000000  00000000  0002bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd5a  00000000  00000000  0002eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbd6  00000000  00000000  0003ec12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000606ad  00000000  00000000  0004c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ace95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac4  00000000  00000000  000acee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d7c 	.word	0x08002d7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d7c 	.word	0x08002d7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim16.Instance) {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	429a      	cmp	r2, r3
 8000232:	d108      	bne.n	8000246 <HAL_TIM_PeriodElapsedCallback+0x26>
    	// Toggle A0/A1, Motor A direction
    	GPIOA -> ODR ^= (GPIO_PIN_0 | GPIO_PIN_1);
 8000234:	2390      	movs	r3, #144	; 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	2390      	movs	r3, #144	; 0x90
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	2103      	movs	r1, #3
 8000240:	404a      	eors	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
    } else if (htim->Instance == htim17.Instance) {
    	// Toggle A3/A4, Motor B direction
    	GPIOA -> ODR ^= (GPIO_PIN_3 | GPIO_PIN_4);
    }
}
 8000244:	e00d      	b.n	8000262 <HAL_TIM_PeriodElapsedCallback+0x42>
    } else if (htim->Instance == htim17.Instance) {
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d107      	bne.n	8000262 <HAL_TIM_PeriodElapsedCallback+0x42>
    	GPIOA -> ODR ^= (GPIO_PIN_3 | GPIO_PIN_4);
 8000252:	2390      	movs	r3, #144	; 0x90
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	695a      	ldr	r2, [r3, #20]
 8000258:	2390      	movs	r3, #144	; 0x90
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2118      	movs	r1, #24
 800025e:	404a      	eors	r2, r1
 8000260:	615a      	str	r2, [r3, #20]
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b002      	add	sp, #8
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	200000bc 	.word	0x200000bc
 8000270:	20000074 	.word	0x20000074

08000274 <setFreq>:

void setFreq(uint16_t fA, uint16_t fB) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	0002      	movs	r2, r0
 800027c:	1dbb      	adds	r3, r7, #6
 800027e:	801a      	strh	r2, [r3, #0]
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	1c0a      	adds	r2, r1, #0
 8000284:	801a      	strh	r2, [r3, #0]
	htim16.Instance->ARR = fA; // TODO actual correct calculation
 8000286:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <setFreq+0x30>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	1dba      	adds	r2, r7, #6
 800028c:	8812      	ldrh	r2, [r2, #0]
 800028e:	62da      	str	r2, [r3, #44]	; 0x2c
	htim17.Instance->ARR = fB; // TODO actual correct calculation
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <setFreq+0x34>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1d3a      	adds	r2, r7, #4
 8000296:	8812      	ldrh	r2, [r2, #0]
 8000298:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	b002      	add	sp, #8
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	200000bc 	.word	0x200000bc
 80002a8:	20000074 	.word	0x20000074

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fb6b 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f845 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f9e1 	bl	8000680 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002be:	f000 f899 	bl	80003f4 <MX_I2C1_Init>
  MX_TIM16_Init();
 80002c2:	f000 f8d9 	bl	8000478 <MX_TIM16_Init>
  MX_TIM17_Init();
 80002c6:	f000 f959 	bl	800057c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Set a direction for both motors, which we'll twiddle later
  GPIOA -> ODR = (GPIO_PIN_0 | GPIO_PIN_3);
 80002ca:	2390      	movs	r3, #144	; 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	2209      	movs	r2, #9
 80002d0:	615a      	str	r2, [r3, #20]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t buffer[4];
	  if (HAL_I2C_Slave_Receive(&hi2c1, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) {
 80002d2:	2301      	movs	r3, #1
 80002d4:	425b      	negs	r3, r3
 80002d6:	0039      	movs	r1, r7
 80002d8:	4818      	ldr	r0, [pc, #96]	; (800033c <main+0x90>)
 80002da:	2204      	movs	r2, #4
 80002dc:	f000 ffd2 	bl	8001284 <HAL_I2C_Slave_Receive>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d129      	bne.n	8000338 <main+0x8c>
		  continue;
		  // Error_Handler();
	  }
	  uint16_t fA = buffer[0] + (buffer[1] << 8);
 80002e4:	003b      	movs	r3, r7
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b299      	uxth	r1, r3
 80002ea:	003b      	movs	r3, r7
 80002ec:	785b      	ldrb	r3, [r3, #1]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	021b      	lsls	r3, r3, #8
 80002f2:	b29a      	uxth	r2, r3
 80002f4:	1dbb      	adds	r3, r7, #6
 80002f6:	188a      	adds	r2, r1, r2
 80002f8:	801a      	strh	r2, [r3, #0]
	  uint16_t fB = buffer[2] + (buffer[3] << 8);
 80002fa:	003b      	movs	r3, r7
 80002fc:	789b      	ldrb	r3, [r3, #2]
 80002fe:	b299      	uxth	r1, r3
 8000300:	003b      	movs	r3, r7
 8000302:	78db      	ldrb	r3, [r3, #3]
 8000304:	b29b      	uxth	r3, r3
 8000306:	021b      	lsls	r3, r3, #8
 8000308:	b29a      	uxth	r2, r3
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	188a      	adds	r2, r1, r2
 800030e:	801a      	strh	r2, [r3, #0]
	  setFreq(fA, fB);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	881a      	ldrh	r2, [r3, #0]
 8000314:	1dbb      	adds	r3, r7, #6
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	0011      	movs	r1, r2
 800031a:	0018      	movs	r0, r3
 800031c:	f7ff ffaa 	bl	8000274 <setFreq>

	  if (HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t *)"OK", 2, HAL_MAX_DELAY) != HAL_OK) {
 8000320:	2301      	movs	r3, #1
 8000322:	425b      	negs	r3, r3
 8000324:	4906      	ldr	r1, [pc, #24]	; (8000340 <main+0x94>)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <main+0x90>)
 8000328:	2202      	movs	r2, #2
 800032a:	f000 fe95 	bl	8001058 <HAL_I2C_Slave_Transmit>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d0cf      	beq.n	80002d2 <main+0x26>
		  Error_Handler();
 8000332:	f000 fa0d 	bl	8000750 <Error_Handler>
 8000336:	e7cc      	b.n	80002d2 <main+0x26>
		  continue;
 8000338:	46c0      	nop			; (mov r8, r8)
  {
 800033a:	e7ca      	b.n	80002d2 <main+0x26>
 800033c:	20000028 	.word	0x20000028
 8000340:	08002d94 	.word	0x08002d94

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b095      	sub	sp, #84	; 0x54
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	2420      	movs	r4, #32
 800034c:	193b      	adds	r3, r7, r4
 800034e:	0018      	movs	r0, r3
 8000350:	2330      	movs	r3, #48	; 0x30
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 fd09 	bl	8002d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035a:	2310      	movs	r3, #16
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	0018      	movs	r0, r3
 8000360:	2310      	movs	r3, #16
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f002 fd01 	bl	8002d6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036a:	003b      	movs	r3, r7
 800036c:	0018      	movs	r0, r3
 800036e:	2310      	movs	r3, #16
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f002 fcfa 	bl	8002d6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000378:	0021      	movs	r1, r4
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2202      	movs	r2, #2
 800037e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2201      	movs	r2, #1
 8000384:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2210      	movs	r2, #16
 800038a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	187b      	adds	r3, r7, r1
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fac5 	bl	8001924 <HAL_RCC_OscConfig>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800039e:	f000 f9d7 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	2110      	movs	r1, #16
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2207      	movs	r2, #7
 80003a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2100      	movs	r1, #0
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fdc9 	bl	8001f58 <HAL_RCC_ClockConfig>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003ca:	f000 f9c1 	bl	8000750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003ce:	003b      	movs	r3, r7
 80003d0:	2220      	movs	r2, #32
 80003d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003d4:	003b      	movs	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003da:	003b      	movs	r3, r7
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 feed 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003e6:	f000 f9b3 	bl	8000750 <Error_Handler>
  }
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b015      	add	sp, #84	; 0x54
 80003f0:	bd90      	pop	{r4, r7, pc}
	...

080003f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_I2C1_Init+0x78>)
 80003fa:	4a1d      	ldr	r2, [pc, #116]	; (8000470 <MX_I2C1_Init+0x7c>)
 80003fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D2D;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_I2C1_Init+0x78>)
 8000400:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <MX_I2C1_Init+0x80>)
 8000402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 128;
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <MX_I2C1_Init+0x78>)
 8000406:	2280      	movs	r2, #128	; 0x80
 8000408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_I2C1_Init+0x78>)
 800040c:	2201      	movs	r2, #1
 800040e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_I2C1_Init+0x78>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_I2C1_Init+0x78>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_I2C1_Init+0x78>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_I2C1_Init+0x78>)
 8000424:	2200      	movs	r2, #0
 8000426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_I2C1_Init+0x78>)
 800042a:	2200      	movs	r2, #0
 800042c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_I2C1_Init+0x78>)
 8000430:	0018      	movs	r0, r3
 8000432:	f000 fd7b 	bl	8000f2c <HAL_I2C_Init>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800043a:	f000 f989 	bl	8000750 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	015a      	lsls	r2, r3, #5
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_I2C1_Init+0x78>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f001 f9d4 	bl	80017f4 <HAL_I2CEx_ConfigAnalogFilter>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8000450:	f000 f97e 	bl	8000750 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_I2C1_Init+0x78>)
 8000456:	2100      	movs	r1, #0
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fa17 	bl	800188c <HAL_I2CEx_ConfigDigitalFilter>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8000462:	f000 f975 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000028 	.word	0x20000028
 8000470:	40005400 	.word	0x40005400
 8000474:	00101d2d 	.word	0x00101d2d

08000478 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b090      	sub	sp, #64	; 0x40
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800047e:	2324      	movs	r3, #36	; 0x24
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	0018      	movs	r0, r3
 8000484:	231c      	movs	r3, #28
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f002 fc6f 	bl	8002d6c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	0018      	movs	r0, r3
 8000492:	2320      	movs	r3, #32
 8000494:	001a      	movs	r2, r3
 8000496:	2100      	movs	r1, #0
 8000498:	f002 fc68 	bl	8002d6c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800049c:	4b34      	ldr	r3, [pc, #208]	; (8000570 <MX_TIM16_Init+0xf8>)
 800049e:	4a35      	ldr	r2, [pc, #212]	; (8000574 <MX_TIM16_Init+0xfc>)
 80004a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15;
 80004a2:	4b33      	ldr	r3, [pc, #204]	; (8000570 <MX_TIM16_Init+0xf8>)
 80004a4:	220f      	movs	r2, #15
 80004a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a8:	4b31      	ldr	r3, [pc, #196]	; (8000570 <MX_TIM16_Init+0xf8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 80004ae:	4b30      	ldr	r3, [pc, #192]	; (8000570 <MX_TIM16_Init+0xf8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b2e      	ldr	r3, [pc, #184]	; (8000570 <MX_TIM16_Init+0xf8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004ba:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <MX_TIM16_Init+0xf8>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c0:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <MX_TIM16_Init+0xf8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004c6:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <MX_TIM16_Init+0xf8>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 ff45 	bl	8002358 <HAL_TIM_Base_Init>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80004d2:	f000 f93d 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80004d6:	4b26      	ldr	r3, [pc, #152]	; (8000570 <MX_TIM16_Init+0xf8>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 ff8d 	bl	80023f8 <HAL_TIM_OC_Init>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f935 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80004e6:	2124      	movs	r1, #36	; 0x24
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30000;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <MX_TIM16_Init+0x100>)
 80004f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000512:	1879      	adds	r1, r7, r1
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_TIM16_Init+0xf8>)
 8000516:	2200      	movs	r2, #0
 8000518:	0018      	movs	r0, r3
 800051a:	f002 f8db 	bl	80026d4 <HAL_TIM_OC_ConfigChannel>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000522:	f000 f915 	bl	8000750 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	0192      	lsls	r2, r2, #6
 800054a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000552:	1d3a      	adds	r2, r7, #4
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_TIM16_Init+0xf8>)
 8000556:	0011      	movs	r1, r2
 8000558:	0018      	movs	r0, r3
 800055a:	f002 fb75 	bl	8002c48 <HAL_TIMEx_ConfigBreakDeadTime>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8000562:	f000 f8f5 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b010      	add	sp, #64	; 0x40
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	200000bc 	.word	0x200000bc
 8000574:	40014400 	.word	0x40014400
 8000578:	00007530 	.word	0x00007530

0800057c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b090      	sub	sp, #64	; 0x40
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000582:	2324      	movs	r3, #36	; 0x24
 8000584:	18fb      	adds	r3, r7, r3
 8000586:	0018      	movs	r0, r3
 8000588:	231c      	movs	r3, #28
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f002 fbed 	bl	8002d6c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	0018      	movs	r0, r3
 8000596:	2320      	movs	r3, #32
 8000598:	001a      	movs	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f002 fbe6 	bl	8002d6c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80005a0:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005a2:	4a35      	ldr	r2, [pc, #212]	; (8000678 <MX_TIM17_Init+0xfc>)
 80005a4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80005a6:	4b33      	ldr	r3, [pc, #204]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b31      	ldr	r3, [pc, #196]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005b4:	4a31      	ldr	r2, [pc, #196]	; (800067c <MX_TIM17_Init+0x100>)
 80005b6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80005ca:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fec3 	bl	8002358 <HAL_TIM_Base_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80005d6:	f000 f8bb 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_TIM17_Init+0xf8>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 ff0b 	bl	80023f8 <HAL_TIM_OC_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 f8b3 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80005ea:	2124      	movs	r1, #36	; 0x24
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000616:	1879      	adds	r1, r7, r1
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_TIM17_Init+0xf8>)
 800061a:	2200      	movs	r2, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f002 f859 	bl	80026d4 <HAL_TIM_OC_ConfigChannel>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000626:	f000 f893 	bl	8000750 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	0192      	lsls	r2, r2, #6
 800064e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_TIM17_Init+0xf8>)
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f002 faf3 	bl	8002c48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8000666:	f000 f873 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b010      	add	sp, #64	; 0x40
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000074 	.word	0x20000074
 8000678:	40014800 	.word	0x40014800
 800067c:	0000ffff 	.word	0x0000ffff

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	240c      	movs	r4, #12
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2314      	movs	r3, #20
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f002 fb6b 	bl	8002d6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <MX_GPIO_Init+0xc8>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0xc8>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	03c9      	lsls	r1, r1, #15
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_GPIO_Init+0xc8>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	03db      	lsls	r3, r3, #15
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_GPIO_Init+0xc8>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_GPIO_Init+0xc8>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0289      	lsls	r1, r1, #10
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_GPIO_Init+0xc8>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	029b      	lsls	r3, r3, #10
 80006c8:	4013      	ands	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin
 80006ce:	2390      	movs	r3, #144	; 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2200      	movs	r2, #0
 80006d4:	21db      	movs	r1, #219	; 0xdb
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fc0a 	bl	8000ef0 <HAL_GPIO_WritePin>
                          |PWMA_Pin|PWMB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : AD0_Pin AD1_Pin */
  GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2203      	movs	r2, #3
 80006e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <MX_GPIO_Init+0xcc>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f000 fa8b 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin
                           PWMA_Pin PWMB_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	22db      	movs	r2, #219	; 0xdb
 80006fe:	601a      	str	r2, [r3, #0]
                          |PWMA_Pin|PWMB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2201      	movs	r2, #1
 8000704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	193a      	adds	r2, r7, r4
 8000714:	2390      	movs	r3, #144	; 0x90
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fa78 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_STAY_Pin */
  GPIO_InitStruct.Pin = S_STAY_Pin;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2204      	movs	r2, #4
 8000724:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S_STAY_GPIO_Port, &GPIO_InitStruct);
 8000732:	193a      	adds	r2, r7, r4
 8000734:	2390      	movs	r3, #144	; 0x90
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fa68 	bl	8000c10 <HAL_GPIO_Init>

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b009      	add	sp, #36	; 0x24
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	48001400 	.word	0x48001400

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x44>)
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_MspInit+0x44>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	619a      	str	r2, [r3, #24]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x44>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x44>)
 800077c:	69da      	ldr	r2, [r3, #28]
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x44>)
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0549      	lsls	r1, r1, #21
 8000784:	430a      	orrs	r2, r1
 8000786:	61da      	str	r2, [r3, #28]
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_MspInit+0x44>)
 800078a:	69da      	ldr	r2, [r3, #28]
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	055b      	lsls	r3, r3, #21
 8000790:	4013      	ands	r3, r2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b08b      	sub	sp, #44	; 0x2c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	2414      	movs	r4, #20
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	0018      	movs	r0, r3
 80007b2:	2314      	movs	r3, #20
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f002 fad8 	bl	8002d6c <memset>
  if(hi2c->Instance==I2C1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <HAL_I2C_MspInit+0x94>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d133      	bne.n	800082e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <HAL_I2C_MspInit+0x98>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <HAL_I2C_MspInit+0x98>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0289      	lsls	r1, r1, #10
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_I2C_MspInit+0x98>)
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	029b      	lsls	r3, r3, #10
 80007dc:	4013      	ands	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	22c0      	movs	r2, #192	; 0xc0
 80007e6:	00d2      	lsls	r2, r2, #3
 80007e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ea:	0021      	movs	r1, r4
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2212      	movs	r2, #18
 80007f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2201      	movs	r2, #1
 80007f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2203      	movs	r2, #3
 80007fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2204      	movs	r2, #4
 8000802:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	187a      	adds	r2, r7, r1
 8000806:	2390      	movs	r3, #144	; 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f000 f9ff 	bl	8000c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_I2C_MspInit+0x98>)
 8000814:	69da      	ldr	r2, [r3, #28]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_I2C_MspInit+0x98>)
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0389      	lsls	r1, r1, #14
 800081c:	430a      	orrs	r2, r1
 800081e:	61da      	str	r2, [r3, #28]
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_I2C_MspInit+0x98>)
 8000822:	69da      	ldr	r2, [r3, #28]
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	039b      	lsls	r3, r3, #14
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b00b      	add	sp, #44	; 0x2c
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40005400 	.word	0x40005400
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <HAL_TIM_Base_MspInit+0x80>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d116      	bne.n	8000880 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_TIM_Base_MspInit+0x84>)
 8000854:	699a      	ldr	r2, [r3, #24]
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_TIM_Base_MspInit+0x84>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0289      	lsls	r1, r1, #10
 800085c:	430a      	orrs	r2, r1
 800085e:	619a      	str	r2, [r3, #24]
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_TIM_Base_MspInit+0x84>)
 8000862:	699a      	ldr	r2, [r3, #24]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	029b      	lsls	r3, r3, #10
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2015      	movs	r0, #21
 8000874:	f000 f99a 	bl	8000bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000878:	2015      	movs	r0, #21
 800087a:	f000 f9ac 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800087e:	e01a      	b.n	80008b6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_TIM_Base_MspInit+0x88>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d115      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_TIM_Base_MspInit+0x84>)
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_TIM_Base_MspInit+0x84>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	02c9      	lsls	r1, r1, #11
 8000894:	430a      	orrs	r2, r1
 8000896:	619a      	str	r2, [r3, #24]
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_TIM_Base_MspInit+0x84>)
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	02db      	lsls	r3, r3, #11
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2016      	movs	r0, #22
 80008ac:	f000 f97e 	bl	8000bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008b0:	2016      	movs	r0, #22
 80008b2:	f000 f990 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40014400 	.word	0x40014400
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40014800 	.word	0x40014800

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f894 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <TIM16_IRQHandler+0x14>)
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fdd0 	bl	80024a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	200000bc 	.word	0x200000bc

08000914 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <TIM17_IRQHandler+0x14>)
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fdc4 	bl	80024a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	20000074 	.word	0x20000074

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490e      	ldr	r1, [pc, #56]	; (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0b      	ldr	r4, [pc, #44]	; (8000984 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000962:	f7ff ffe3 	bl	800092c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000966:	f002 f9dd 	bl	8002d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fc9f 	bl	80002ac <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   r0, =_estack
 8000970:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800097c:	08002dd0 	.word	0x08002dd0
  ldr r2, =_sbss
 8000980:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000984:	20000108 	.word	0x20000108

08000988 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_IRQHandler>
	...

0800098c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_Init+0x24>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_Init+0x24>)
 8000996:	2110      	movs	r1, #16
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 f809 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a2:	f7ff fedb 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x5c>)
 80009be:	681c      	ldr	r4, [r3, #0]
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_InitTick+0x60>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	0019      	movs	r1, r3
 80009c6:	23fa      	movs	r3, #250	; 0xfa
 80009c8:	0098      	lsls	r0, r3, #2
 80009ca:	f7ff fb9d 	bl	8000108 <__udivsi3>
 80009ce:	0003      	movs	r3, r0
 80009d0:	0019      	movs	r1, r3
 80009d2:	0020      	movs	r0, r4
 80009d4:	f7ff fb98 	bl	8000108 <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f90b 	bl	8000bf6 <HAL_SYSTICK_Config>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e00f      	b.n	8000a08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d80b      	bhi.n	8000a06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f8d8 	bl	8000bac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_InitTick+0x64>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	18d2      	adds	r2, r2, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000104 	.word	0x20000104

08000a40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	20000104 	.word	0x20000104

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b7f      	cmp	r3, #127	; 0x7f
 8000a66:	d809      	bhi.n	8000a7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	231f      	movs	r3, #31
 8000a70:	401a      	ands	r2, r3
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_EnableIRQ+0x30>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	4091      	lsls	r1, r2
 8000a78:	000a      	movs	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a9c:	d828      	bhi.n	8000af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	33c0      	adds	r3, #192	; 0xc0
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	589b      	ldr	r3, [r3, r2]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	; 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	; 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	33c0      	adds	r3, #192	; 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aee:	e031      	b.n	8000b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0019      	movs	r1, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	400b      	ands	r3, r1
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3306      	adds	r3, #6
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	3304      	adds	r3, #4
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	; 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	001c      	movs	r4, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	18c3      	adds	r3, r0, r3
 8000b50:	3304      	adds	r3, #4
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b003      	add	sp, #12
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	045b      	lsls	r3, r3, #17
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d301      	bcc.n	8000b7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e010      	b.n	8000b9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <SysTick_Config+0x44>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	3a01      	subs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff ff7c 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x44>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	1c02      	adds	r2, r0, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	0002      	movs	r2, r0
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ff33 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff ffaf 	bl	8000b64 <SysTick_Config>
 8000c06:	0003      	movs	r3, r0
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1e:	e14f      	b.n	8000ec0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4091      	lsls	r1, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d100      	bne.n	8000c38 <HAL_GPIO_Init+0x28>
 8000c36:	e140      	b.n	8000eba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d00b      	beq.n	8000c58 <HAL_GPIO_Init+0x48>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d007      	beq.n	8000c58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c4c:	2b11      	cmp	r3, #17
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b12      	cmp	r3, #18
 8000c56:	d130      	bne.n	8000cba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	43da      	mvns	r2, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0xea>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d123      	bne.n	8000d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	08da      	lsrs	r2, r3, #3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3208      	adds	r2, #8
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	58d3      	ldr	r3, [r2, r3]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	220f      	movs	r2, #15
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	691a      	ldr	r2, [r3, #16]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	2107      	movs	r1, #7
 8000d26:	400b      	ands	r3, r1
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	08da      	lsrs	r2, r3, #3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	6939      	ldr	r1, [r7, #16]
 8000d40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	43da      	mvns	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2203      	movs	r2, #3
 8000d60:	401a      	ands	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	055b      	lsls	r3, r3, #21
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d100      	bne.n	8000d84 <HAL_GPIO_Init+0x174>
 8000d82:	e09a      	b.n	8000eba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d84:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <HAL_GPIO_Init+0x2c8>)
 8000d86:	699a      	ldr	r2, [r3, #24]
 8000d88:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <HAL_GPIO_Init+0x2c8>)
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	619a      	str	r2, [r3, #24]
 8000d90:	4b51      	ldr	r3, [pc, #324]	; (8000ed8 <HAL_GPIO_Init+0x2c8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	2201      	movs	r2, #1
 8000d96:	4013      	ands	r3, r2
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <HAL_GPIO_Init+0x2cc>)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	589b      	ldr	r3, [r3, r2]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2203      	movs	r2, #3
 8000dae:	4013      	ands	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	409a      	lsls	r2, r3
 8000db6:	0013      	movs	r3, r2
 8000db8:	43da      	mvns	r2, r3
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	2390      	movs	r3, #144	; 0x90
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x1e2>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a44      	ldr	r2, [pc, #272]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x1de>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a43      	ldr	r2, [pc, #268]	; (8000ee4 <HAL_GPIO_Init+0x2d4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x1da>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a42      	ldr	r2, [pc, #264]	; (8000ee8 <HAL_GPIO_Init+0x2d8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x1d6>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x1e4>
 8000de6:	2305      	movs	r3, #5
 8000de8:	e004      	b.n	8000df4 <HAL_GPIO_Init+0x1e4>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_Init+0x1e4>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <HAL_GPIO_Init+0x1e4>
 8000df2:	2300      	movs	r3, #0
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	2103      	movs	r1, #3
 8000df8:	400a      	ands	r2, r1
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e04:	4935      	ldr	r1, [pc, #212]	; (8000edc <HAL_GPIO_Init+0x2cc>)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	025b      	lsls	r3, r3, #9
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43da      	mvns	r2, r3
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	029b      	lsls	r3, r3, #10
 8000e54:	4013      	ands	r3, r2
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	035b      	lsls	r3, r3, #13
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43da      	mvns	r2, r3
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	039b      	lsls	r3, r3, #14
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	40da      	lsrs	r2, r3
 8000ec8:	1e13      	subs	r3, r2, #0
 8000eca:	d000      	beq.n	8000ece <HAL_GPIO_Init+0x2be>
 8000ecc:	e6a8      	b.n	8000c20 <HAL_GPIO_Init+0x10>
  } 
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b006      	add	sp, #24
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	48000c00 	.word	0x48000c00
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	0008      	movs	r0, r1
 8000efa:	0011      	movs	r1, r2
 8000efc:	1cbb      	adds	r3, r7, #2
 8000efe:	1c02      	adds	r2, r0, #0
 8000f00:	801a      	strh	r2, [r3, #0]
 8000f02:	1c7b      	adds	r3, r7, #1
 8000f04:	1c0a      	adds	r2, r1, #0
 8000f06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f08:	1c7b      	adds	r3, r7, #1
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f10:	1cbb      	adds	r3, r7, #2
 8000f12:	881a      	ldrh	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f18:	e003      	b.n	8000f22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f1a:	1cbb      	adds	r3, r7, #2
 8000f1c:	881a      	ldrh	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e082      	b.n	8001044 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2241      	movs	r2, #65	; 0x41
 8000f42:	5c9b      	ldrb	r3, [r3, r2]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d107      	bne.n	8000f5a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2240      	movs	r2, #64	; 0x40
 8000f4e:	2100      	movs	r1, #0
 8000f50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fc25 	bl	80007a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2241      	movs	r2, #65	; 0x41
 8000f5e:	2124      	movs	r1, #36	; 0x24
 8000f60:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	438a      	bics	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4934      	ldr	r1, [pc, #208]	; (800104c <HAL_I2C_Init+0x120>)
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4931      	ldr	r1, [pc, #196]	; (8001050 <HAL_I2C_Init+0x124>)
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d108      	bne.n	8000faa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	0209      	lsls	r1, r1, #8
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	e007      	b.n	8000fba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2184      	movs	r1, #132	; 0x84
 8000fb4:	0209      	lsls	r1, r1, #8
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d104      	bne.n	8000fcc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	491f      	ldr	r1, [pc, #124]	; (8001054 <HAL_I2C_Init+0x128>)
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	491a      	ldr	r1, [pc, #104]	; (8001050 <HAL_I2C_Init+0x124>)
 8000fe8:	400a      	ands	r2, r1
 8000fea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	021a      	lsls	r2, r3, #8
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69d9      	ldr	r1, [r3, #28]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1a      	ldr	r2, [r3, #32]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2241      	movs	r2, #65	; 0x41
 8001030:	2120      	movs	r1, #32
 8001032:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2242      	movs	r2, #66	; 0x42
 800103e:	2100      	movs	r1, #0
 8001040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}
 800104c:	f0ffffff 	.word	0xf0ffffff
 8001050:	ffff7fff 	.word	0xffff7fff
 8001054:	02008000 	.word	0x02008000

08001058 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af02      	add	r7, sp, #8
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	1dbb      	adds	r3, r7, #6
 8001066:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2241      	movs	r2, #65	; 0x41
 800106c:	5c9b      	ldrb	r3, [r3, r2]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b20      	cmp	r3, #32
 8001072:	d000      	beq.n	8001076 <HAL_I2C_Slave_Transmit+0x1e>
 8001074:	e0fe      	b.n	8001274 <HAL_I2C_Slave_Transmit+0x21c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_I2C_Slave_Transmit+0x2c>
 800107c:	1dbb      	adds	r3, r7, #6
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d105      	bne.n	8001090 <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0f2      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	5c9b      	ldrb	r3, [r3, r2]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d101      	bne.n	800109e <HAL_I2C_Slave_Transmit+0x46>
 800109a:	2302      	movs	r3, #2
 800109c:	e0eb      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	2101      	movs	r1, #1
 80010a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010a6:	f7ff fccb 	bl	8000a40 <HAL_GetTick>
 80010aa:	0003      	movs	r3, r0
 80010ac:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2241      	movs	r2, #65	; 0x41
 80010b2:	2121      	movs	r1, #33	; 0x21
 80010b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2242      	movs	r2, #66	; 0x42
 80010ba:	2120      	movs	r1, #32
 80010bc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1dba      	adds	r2, r7, #6
 80010ce:	8812      	ldrh	r2, [r2, #0]
 80010d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4967      	ldr	r1, [pc, #412]	; (8001280 <HAL_I2C_Slave_Transmit+0x228>)
 80010e4:	400a      	ands	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	0013      	movs	r3, r2
 80010f2:	2200      	movs	r2, #0
 80010f4:	2108      	movs	r1, #8
 80010f6:	f000 f9f1 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 80010fa:	1e03      	subs	r3, r0, #0
 80010fc:	d00a      	beq.n	8001114 <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	0209      	lsls	r1, r1, #8
 800110c:	430a      	orrs	r2, r1
 800110e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0b0      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2208      	movs	r2, #8
 800111a:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d119      	bne.n	8001158 <HAL_I2C_Slave_Transmit+0x100>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	0013      	movs	r3, r2
 800112e:	2200      	movs	r2, #0
 8001130:	2108      	movs	r1, #8
 8001132:	f000 f9d3 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d00a      	beq.n	8001150 <HAL_I2C_Slave_Transmit+0xf8>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	0209      	lsls	r1, r1, #8
 8001148:	430a      	orrs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e092      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2208      	movs	r2, #8
 8001156:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	0259      	lsls	r1, r3, #9
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	0013      	movs	r3, r2
 8001166:	2200      	movs	r2, #0
 8001168:	f000 f9b8 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d02f      	beq.n	80011d0 <HAL_I2C_Slave_Transmit+0x178>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	0209      	lsls	r1, r1, #8
 800117e:	430a      	orrs	r2, r1
 8001180:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e077      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	6839      	ldr	r1, [r7, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f9e4 	bl	800155a <I2C_WaitOnTXISFlagUntilTimeout>
 8001192:	1e03      	subs	r3, r0, #0
 8001194:	d00a      	beq.n	80011ac <HAL_I2C_Slave_Transmit+0x154>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0209      	lsls	r1, r1, #8
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e064      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1d5      	bne.n	8001186 <HAL_I2C_Slave_Transmit+0x12e>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f000 f9f9 	bl	80015d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d012      	beq.n	8001210 <HAL_I2C_Slave_Transmit+0x1b8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	0209      	lsls	r1, r1, #8
 80011f8:	430a      	orrs	r2, r1
 80011fa:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	2b04      	cmp	r3, #4
 8001202:	d103      	bne.n	800120c <HAL_I2C_Slave_Transmit+0x1b4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
 800120a:	e001      	b.n	8001210 <HAL_I2C_Slave_Transmit+0x1b8>
      }
      else
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e032      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2220      	movs	r2, #32
 8001216:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	0219      	lsls	r1, r3, #8
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	0013      	movs	r3, r2
 8001226:	2201      	movs	r2, #1
 8001228:	f000 f958 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d00a      	beq.n	8001246 <HAL_I2C_Slave_Transmit+0x1ee>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	0209      	lsls	r1, r1, #8
 800123e:	430a      	orrs	r2, r1
 8001240:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e017      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	0209      	lsls	r1, r1, #8
 8001254:	430a      	orrs	r2, r1
 8001256:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2241      	movs	r2, #65	; 0x41
 800125c:	2120      	movs	r1, #32
 800125e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2242      	movs	r2, #66	; 0x42
 8001264:	2100      	movs	r1, #0
 8001266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2240      	movs	r2, #64	; 0x40
 800126c:	2100      	movs	r1, #0
 800126e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <HAL_I2C_Slave_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001274:	2302      	movs	r3, #2
  }
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b006      	add	sp, #24
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	ffff7fff 	.word	0xffff7fff

08001284 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af02      	add	r7, sp, #8
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	1dbb      	adds	r3, r7, #6
 8001292:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2241      	movs	r2, #65	; 0x41
 8001298:	5c9b      	ldrb	r3, [r3, r2]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b20      	cmp	r3, #32
 800129e:	d000      	beq.n	80012a2 <HAL_I2C_Slave_Receive+0x1e>
 80012a0:	e0f3      	b.n	800148a <HAL_I2C_Slave_Receive+0x206>
  {
    if ((pData == NULL) || (Size == 0U))
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_I2C_Slave_Receive+0x2c>
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d105      	bne.n	80012bc <HAL_I2C_Slave_Receive+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e0e7      	b.n	800148c <HAL_I2C_Slave_Receive+0x208>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	5c9b      	ldrb	r3, [r3, r2]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_I2C_Slave_Receive+0x46>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e0e0      	b.n	800148c <HAL_I2C_Slave_Receive+0x208>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2240      	movs	r2, #64	; 0x40
 80012ce:	2101      	movs	r1, #1
 80012d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012d2:	f7ff fbb5 	bl	8000a40 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2241      	movs	r2, #65	; 0x41
 80012de:	2122      	movs	r1, #34	; 0x22
 80012e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2242      	movs	r2, #66	; 0x42
 80012e6:	2120      	movs	r1, #32
 80012e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1dba      	adds	r2, r7, #6
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4961      	ldr	r1, [pc, #388]	; (8001494 <HAL_I2C_Slave_Receive+0x210>)
 8001310:	400a      	ands	r2, r1
 8001312:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	0013      	movs	r3, r2
 800131e:	2200      	movs	r2, #0
 8001320:	2108      	movs	r1, #8
 8001322:	f000 f8db 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d00a      	beq.n	8001340 <HAL_I2C_Slave_Receive+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0209      	lsls	r1, r1, #8
 8001338:	430a      	orrs	r2, r1
 800133a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0a5      	b.n	800148c <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2208      	movs	r2, #8
 8001346:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	0259      	lsls	r1, r3, #9
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	0013      	movs	r3, r2
 8001356:	2201      	movs	r2, #1
 8001358:	f000 f8c0 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d04a      	beq.n	80013f6 <HAL_I2C_Slave_Receive+0x172>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	0209      	lsls	r1, r1, #8
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e08a      	b.n	800148c <HAL_I2C_Slave_Receive+0x208>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	6839      	ldr	r1, [r7, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	0018      	movs	r0, r3
 800137e:	f000 f967 	bl	8001650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d024      	beq.n	80013d0 <HAL_I2C_Slave_Receive+0x14c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	0209      	lsls	r1, r1, #8
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2204      	movs	r2, #4
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d112      	bne.n	80013cc <HAL_I2C_Slave_Receive+0x148>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e05d      	b.n	800148c <HAL_I2C_Slave_Receive+0x208>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ba      	bne.n	8001376 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	0018      	movs	r0, r3
 8001408:	f000 f8e6 	bl	80015d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d00a      	beq.n	8001426 <HAL_I2C_Slave_Receive+0x1a2>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	0209      	lsls	r1, r1, #8
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e032      	b.n	800148c <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2220      	movs	r2, #32
 800142c:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	0219      	lsls	r1, r3, #8
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	0013      	movs	r3, r2
 800143c:	2201      	movs	r2, #1
 800143e:	f000 f84d 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d00a      	beq.n	800145c <HAL_I2C_Slave_Receive+0x1d8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0209      	lsls	r1, r1, #8
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e017      	b.n	800148c <HAL_I2C_Slave_Receive+0x208>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	0209      	lsls	r1, r1, #8
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2241      	movs	r2, #65	; 0x41
 8001472:	2120      	movs	r1, #32
 8001474:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2242      	movs	r2, #66	; 0x42
 800147a:	2100      	movs	r1, #0
 800147c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	2100      	movs	r1, #0
 8001484:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_I2C_Slave_Receive+0x208>
  }
  else
  {
    return HAL_BUSY;
 800148a:	2302      	movs	r3, #2
  }
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b006      	add	sp, #24
 8001492:	bd80      	pop	{r7, pc}
 8001494:	ffff7fff 	.word	0xffff7fff

08001498 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d103      	bne.n	80014b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d007      	beq.n	80014d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2101      	movs	r1, #1
 80014d0:	430a      	orrs	r2, r1
 80014d2:	619a      	str	r2, [r3, #24]
  }
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b002      	add	sp, #8
 80014da:	bd80      	pop	{r7, pc}

080014dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014ec:	e021      	b.n	8001532 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	d01e      	beq.n	8001532 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014f4:	f7ff faa4 	bl	8000a40 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d302      	bcc.n	800150a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d113      	bne.n	8001532 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	2220      	movs	r2, #32
 8001510:	431a      	orrs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2241      	movs	r2, #65	; 0x41
 800151a:	2120      	movs	r1, #32
 800151c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2242      	movs	r2, #66	; 0x42
 8001522:	2100      	movs	r1, #0
 8001524:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	2100      	movs	r1, #0
 800152c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	4013      	ands	r3, r2
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	425a      	negs	r2, r3
 8001542:	4153      	adcs	r3, r2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	001a      	movs	r2, r3
 8001548:	1dfb      	adds	r3, r7, #7
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d0ce      	beq.n	80014ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}

0800155a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001566:	e02b      	b.n	80015c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	0018      	movs	r0, r3
 8001570:	f000 f8da 	bl	8001728 <I2C_IsAcknowledgeFailed>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d001      	beq.n	800157c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e029      	b.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3301      	adds	r3, #1
 8001580:	d01e      	beq.n	80015c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001582:	f7ff fa5d 	bl	8000a40 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	d302      	bcc.n	8001598 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d113      	bne.n	80015c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	2220      	movs	r2, #32
 800159e:	431a      	orrs	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2241      	movs	r2, #65	; 0x41
 80015a8:	2120      	movs	r1, #32
 80015aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2242      	movs	r2, #66	; 0x42
 80015b0:	2100      	movs	r1, #0
 80015b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e007      	b.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d1cc      	bne.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015e4:	e028      	b.n	8001638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f000 f89b 	bl	8001728 <I2C_IsAcknowledgeFailed>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d001      	beq.n	80015fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e026      	b.n	8001648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015fa:	f7ff fa21 	bl	8000a40 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	429a      	cmp	r2, r3
 8001608:	d302      	bcc.n	8001610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d113      	bne.n	8001638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	2220      	movs	r2, #32
 8001616:	431a      	orrs	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2241      	movs	r2, #65	; 0x41
 8001620:	2120      	movs	r1, #32
 8001622:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2242      	movs	r2, #66	; 0x42
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	2100      	movs	r1, #0
 8001632:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e007      	b.n	8001648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2220      	movs	r2, #32
 8001640:	4013      	ands	r3, r2
 8001642:	2b20      	cmp	r3, #32
 8001644:	d1cf      	bne.n	80015e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bd80      	pop	{r7, pc}

08001650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800165c:	e055      	b.n	800170a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	0018      	movs	r0, r3
 8001666:	f000 f85f 	bl	8001728 <I2C_IsAcknowledgeFailed>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d001      	beq.n	8001672 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e053      	b.n	800171a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2220      	movs	r2, #32
 800167a:	4013      	ands	r3, r2
 800167c:	2b20      	cmp	r3, #32
 800167e:	d129      	bne.n	80016d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2204      	movs	r2, #4
 8001688:	4013      	ands	r3, r2
 800168a:	2b04      	cmp	r3, #4
 800168c:	d105      	bne.n	800169a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e03f      	b.n	800171a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2220      	movs	r2, #32
 80016a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	491d      	ldr	r1, [pc, #116]	; (8001724 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80016ae:	400a      	ands	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2241      	movs	r2, #65	; 0x41
 80016bc:	2120      	movs	r1, #32
 80016be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2242      	movs	r2, #66	; 0x42
 80016c4:	2100      	movs	r1, #0
 80016c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	2100      	movs	r1, #0
 80016ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e022      	b.n	800171a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d4:	f7ff f9b4 	bl	8000a40 <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d302      	bcc.n	80016ea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10f      	bne.n	800170a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	2220      	movs	r2, #32
 80016f0:	431a      	orrs	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2241      	movs	r2, #65	; 0x41
 80016fa:	2120      	movs	r1, #32
 80016fc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2240      	movs	r2, #64	; 0x40
 8001702:	2100      	movs	r1, #0
 8001704:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e007      	b.n	800171a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2204      	movs	r2, #4
 8001712:	4013      	ands	r3, r2
 8001714:	2b04      	cmp	r3, #4
 8001716:	d1a2      	bne.n	800165e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	fe00e800 	.word	0xfe00e800

08001728 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2210      	movs	r2, #16
 800173c:	4013      	ands	r3, r2
 800173e:	2b10      	cmp	r3, #16
 8001740:	d151      	bne.n	80017e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001742:	e021      	b.n	8001788 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	3301      	adds	r3, #1
 8001748:	d01e      	beq.n	8001788 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7ff f979 	bl	8000a40 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_IsAcknowledgeFailed+0x38>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d113      	bne.n	8001788 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	2220      	movs	r2, #32
 8001766:	431a      	orrs	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	2120      	movs	r1, #32
 8001772:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2242      	movs	r2, #66	; 0x42
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e02f      	b.n	80017e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2220      	movs	r2, #32
 8001790:	4013      	ands	r3, r2
 8001792:	2b20      	cmp	r3, #32
 8001794:	d1d6      	bne.n	8001744 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2210      	movs	r2, #16
 800179c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2220      	movs	r2, #32
 80017a4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff fe75 	bl	8001498 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	490d      	ldr	r1, [pc, #52]	; (80017f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	2204      	movs	r2, #4
 80017c4:	431a      	orrs	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2241      	movs	r2, #65	; 0x41
 80017ce:	2120      	movs	r1, #32
 80017d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2242      	movs	r2, #66	; 0x42
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	2100      	movs	r1, #0
 80017e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	fe00e800 	.word	0xfe00e800

080017f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2241      	movs	r2, #65	; 0x41
 8001802:	5c9b      	ldrb	r3, [r3, r2]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b20      	cmp	r3, #32
 8001808:	d138      	bne.n	800187c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	5c9b      	ldrb	r3, [r3, r2]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001814:	2302      	movs	r3, #2
 8001816:	e032      	b.n	800187e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	2101      	movs	r1, #1
 800181e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2241      	movs	r2, #65	; 0x41
 8001824:	2124      	movs	r1, #36	; 0x24
 8001826:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2101      	movs	r1, #1
 8001834:	438a      	bics	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4911      	ldr	r1, [pc, #68]	; (8001888 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001844:	400a      	ands	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2101      	movs	r1, #1
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2241      	movs	r2, #65	; 0x41
 800186c:	2120      	movs	r1, #32
 800186e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2240      	movs	r2, #64	; 0x40
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e000      	b.n	800187e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800187c:	2302      	movs	r3, #2
  }
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	ffffefff 	.word	0xffffefff

0800188c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2241      	movs	r2, #65	; 0x41
 800189a:	5c9b      	ldrb	r3, [r3, r2]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d139      	bne.n	8001916 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2240      	movs	r2, #64	; 0x40
 80018a6:	5c9b      	ldrb	r3, [r3, r2]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e033      	b.n	8001918 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2240      	movs	r2, #64	; 0x40
 80018b4:	2101      	movs	r1, #1
 80018b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2241      	movs	r2, #65	; 0x41
 80018bc:	2124      	movs	r1, #36	; 0x24
 80018be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	438a      	bics	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2241      	movs	r2, #65	; 0x41
 8001906:	2120      	movs	r1, #32
 8001908:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	2100      	movs	r1, #0
 8001910:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001916:	2302      	movs	r3, #2
  }
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}
 8001920:	fffff0ff 	.word	0xfffff0ff

08001924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e301      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2201      	movs	r2, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d100      	bne.n	8001942 <HAL_RCC_OscConfig+0x1e>
 8001940:	e08d      	b.n	8001a5e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001942:	4bc3      	ldr	r3, [pc, #780]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	220c      	movs	r2, #12
 8001948:	4013      	ands	r3, r2
 800194a:	2b04      	cmp	r3, #4
 800194c:	d00e      	beq.n	800196c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800194e:	4bc0      	ldr	r3, [pc, #768]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	220c      	movs	r2, #12
 8001954:	4013      	ands	r3, r2
 8001956:	2b08      	cmp	r3, #8
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x64>
 800195a:	4bbd      	ldr	r3, [pc, #756]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	401a      	ands	r2, r3
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	429a      	cmp	r2, r3
 800196a:	d10d      	bne.n	8001988 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	4bb8      	ldr	r3, [pc, #736]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	029b      	lsls	r3, r3, #10
 8001974:	4013      	ands	r3, r2
 8001976:	d100      	bne.n	800197a <HAL_RCC_OscConfig+0x56>
 8001978:	e070      	b.n	8001a5c <HAL_RCC_OscConfig+0x138>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d000      	beq.n	8001984 <HAL_RCC_OscConfig+0x60>
 8001982:	e06b      	b.n	8001a5c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e2d8      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x7c>
 8001990:	4baf      	ldr	r3, [pc, #700]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4bae      	ldr	r3, [pc, #696]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	0249      	lsls	r1, r1, #9
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e02f      	b.n	8001a00 <HAL_RCC_OscConfig+0xdc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10c      	bne.n	80019c2 <HAL_RCC_OscConfig+0x9e>
 80019a8:	4ba9      	ldr	r3, [pc, #676]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4ba8      	ldr	r3, [pc, #672]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	49a9      	ldr	r1, [pc, #676]	; (8001c54 <HAL_RCC_OscConfig+0x330>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4ba6      	ldr	r3, [pc, #664]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4ba5      	ldr	r3, [pc, #660]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	49a7      	ldr	r1, [pc, #668]	; (8001c58 <HAL_RCC_OscConfig+0x334>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e01e      	b.n	8001a00 <HAL_RCC_OscConfig+0xdc>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d10e      	bne.n	80019e8 <HAL_RCC_OscConfig+0xc4>
 80019ca:	4ba1      	ldr	r3, [pc, #644]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	02c9      	lsls	r1, r1, #11
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	4b9d      	ldr	r3, [pc, #628]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b9c      	ldr	r3, [pc, #624]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	0249      	lsls	r1, r1, #9
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0xdc>
 80019e8:	4b99      	ldr	r3, [pc, #612]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b98      	ldr	r3, [pc, #608]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	4999      	ldr	r1, [pc, #612]	; (8001c54 <HAL_RCC_OscConfig+0x330>)
 80019f0:	400a      	ands	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	4b96      	ldr	r3, [pc, #600]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b95      	ldr	r3, [pc, #596]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	4997      	ldr	r1, [pc, #604]	; (8001c58 <HAL_RCC_OscConfig+0x334>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d014      	beq.n	8001a32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff f81a 	bl	8000a40 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a12:	f7ff f815 	bl	8000a40 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e28a      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a24:	4b8a      	ldr	r3, [pc, #552]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0xee>
 8001a30:	e015      	b.n	8001a5e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff f805 	bl	8000a40 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f800 	bl	8000a40 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e275      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	4013      	ands	r3, r2
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x118>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x146>
 8001a68:	e069      	b.n	8001b3e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a6a:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	220c      	movs	r2, #12
 8001a70:	4013      	ands	r3, r2
 8001a72:	d00b      	beq.n	8001a8c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a74:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	220c      	movs	r2, #12
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d11c      	bne.n	8001aba <HAL_RCC_OscConfig+0x196>
 8001a80:	4b73      	ldr	r3, [pc, #460]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d116      	bne.n	8001aba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2202      	movs	r2, #2
 8001a92:	4013      	ands	r3, r2
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x17e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e24b      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	22f8      	movs	r2, #248	; 0xf8
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	00da      	lsls	r2, r3, #3
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab8:	e041      	b.n	8001b3e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d024      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	2101      	movs	r1, #1
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7fe ffb7 	bl	8000a40 <HAL_GetTick>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7fe ffb2 	bl	8000a40 <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e227      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d0f1      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	22f8      	movs	r2, #248	; 0xf8
 8001afa:	4393      	bics	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00da      	lsls	r2, r3, #3
 8001b04:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e018      	b.n	8001b3e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	438a      	bics	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7fe ff92 	bl	8000a40 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b22:	f7fe ff8d 	bl	8000a40 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e202      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d1f1      	bne.n	8001b22 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2208      	movs	r2, #8
 8001b44:	4013      	ands	r3, r2
 8001b46:	d036      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d019      	beq.n	8001b84 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b54:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7fe ff70 	bl	8000a40 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b66:	f7fe ff6b 	bl	8000a40 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1e0      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d0f1      	beq.n	8001b66 <HAL_RCC_OscConfig+0x242>
 8001b82:	e018      	b.n	8001bb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7fe ff56 	bl	8000a40 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7fe ff51 	bl	8000a40 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1c6      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1f1      	bne.n	8001b9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d100      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x29e>
 8001bc0:	e0b4      	b.n	8001d2c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	201f      	movs	r0, #31
 8001bc4:	183b      	adds	r3, r7, r0
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	69da      	ldr	r2, [r3, #28]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	055b      	lsls	r3, r3, #21
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d110      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	0549      	lsls	r1, r1, #21
 8001be0:	430a      	orrs	r2, r1
 8001be2:	61da      	str	r2, [r3, #28]
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	055b      	lsls	r3, r3, #21
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bf2:	183b      	adds	r3, r7, r0
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_RCC_OscConfig+0x338>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4013      	ands	r3, r2
 8001c02:	d11a      	bne.n	8001c3a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_RCC_OscConfig+0x338>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_RCC_OscConfig+0x338>)
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	0049      	lsls	r1, r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c12:	f7fe ff15 	bl	8000a40 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1c:	f7fe ff10 	bl	8000a40 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e185      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x338>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10e      	bne.n	8001c60 <HAL_RCC_OscConfig+0x33c>
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	621a      	str	r2, [r3, #32]
 8001c4e:	e035      	b.n	8001cbc <HAL_RCC_OscConfig+0x398>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	fffeffff 	.word	0xfffeffff
 8001c58:	fffbffff 	.word	0xfffbffff
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x35e>
 8001c68:	4bb6      	ldr	r3, [pc, #728]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001c6a:	6a1a      	ldr	r2, [r3, #32]
 8001c6c:	4bb5      	ldr	r3, [pc, #724]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	438a      	bics	r2, r1
 8001c72:	621a      	str	r2, [r3, #32]
 8001c74:	4bb3      	ldr	r3, [pc, #716]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001c76:	6a1a      	ldr	r2, [r3, #32]
 8001c78:	4bb2      	ldr	r3, [pc, #712]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	621a      	str	r2, [r3, #32]
 8001c80:	e01c      	b.n	8001cbc <HAL_RCC_OscConfig+0x398>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x380>
 8001c8a:	4bae      	ldr	r3, [pc, #696]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001c8c:	6a1a      	ldr	r2, [r3, #32]
 8001c8e:	4bad      	ldr	r3, [pc, #692]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001c90:	2104      	movs	r1, #4
 8001c92:	430a      	orrs	r2, r1
 8001c94:	621a      	str	r2, [r3, #32]
 8001c96:	4bab      	ldr	r3, [pc, #684]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	4baa      	ldr	r3, [pc, #680]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	621a      	str	r2, [r3, #32]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0x398>
 8001ca4:	4ba7      	ldr	r3, [pc, #668]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	4ba6      	ldr	r3, [pc, #664]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	438a      	bics	r2, r1
 8001cae:	621a      	str	r2, [r3, #32]
 8001cb0:	4ba4      	ldr	r3, [pc, #656]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001cb2:	6a1a      	ldr	r2, [r3, #32]
 8001cb4:	4ba3      	ldr	r3, [pc, #652]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	438a      	bics	r2, r1
 8001cba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d014      	beq.n	8001cee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc4:	f7fe febc 	bl	8000a40 <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e009      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7fe feb7 	bl	8000a40 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	4a9b      	ldr	r2, [pc, #620]	; (8001f48 <HAL_RCC_OscConfig+0x624>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e12b      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	4b98      	ldr	r3, [pc, #608]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x3aa>
 8001cec:	e013      	b.n	8001d16 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7fe fea7 	bl	8000a40 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	e009      	b.n	8001d0c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7fe fea2 	bl	8000a40 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	4a91      	ldr	r2, [pc, #580]	; (8001f48 <HAL_RCC_OscConfig+0x624>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e116      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0c:	4b8d      	ldr	r3, [pc, #564]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d16:	231f      	movs	r3, #31
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d20:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	4b87      	ldr	r3, [pc, #540]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d26:	4989      	ldr	r1, [pc, #548]	; (8001f4c <HAL_RCC_OscConfig+0x628>)
 8001d28:	400a      	ands	r2, r1
 8001d2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2210      	movs	r2, #16
 8001d32:	4013      	ands	r3, r2
 8001d34:	d063      	beq.n	8001dfe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d3e:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d42:	4b80      	ldr	r3, [pc, #512]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d44:	2104      	movs	r1, #4
 8001d46:	430a      	orrs	r2, r1
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d4a:	4b7e      	ldr	r3, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4e:	4b7d      	ldr	r3, [pc, #500]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7fe fe73 	bl	8000a40 <HAL_GetTick>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d60:	f7fe fe6e 	bl	8000a40 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0e3      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d72:	4b74      	ldr	r3, [pc, #464]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	2202      	movs	r2, #2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f1      	beq.n	8001d60 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d7c:	4b71      	ldr	r3, [pc, #452]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d80:	22f8      	movs	r2, #248	; 0xf8
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	00da      	lsls	r2, r3, #3
 8001d8c:	4b6d      	ldr	r3, [pc, #436]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34
 8001d92:	e034      	b.n	8001dfe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	3305      	adds	r3, #5
 8001d9a:	d111      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d9c:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da0:	4b68      	ldr	r3, [pc, #416]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001da2:	2104      	movs	r1, #4
 8001da4:	438a      	bics	r2, r1
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001da8:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	22f8      	movs	r2, #248	; 0xf8
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	00da      	lsls	r2, r3, #3
 8001db8:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001dbe:	e01e      	b.n	8001dfe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dc0:	4b60      	ldr	r3, [pc, #384]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc4:	4b5f      	ldr	r3, [pc, #380]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dcc:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd0:	4b5c      	ldr	r3, [pc, #368]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fe32 	bl	8000a40 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001de2:	f7fe fe2d 	bl	8000a40 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0a2      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d1f1      	bne.n	8001de2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d100      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4e4>
 8001e06:	e097      	b.n	8001f38 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4b4e      	ldr	r3, [pc, #312]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	220c      	movs	r2, #12
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d100      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4f2>
 8001e14:	e06b      	b.n	8001eee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d14c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b48      	ldr	r3, [pc, #288]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e24:	494a      	ldr	r1, [pc, #296]	; (8001f50 <HAL_RCC_OscConfig+0x62c>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fe09 	bl	8000a40 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe fe04 	bl	8000a40 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e079      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	049b      	lsls	r3, r3, #18
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e52:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	220f      	movs	r2, #15
 8001e58:	4393      	bics	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e66:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a3a      	ldr	r2, [pc, #232]	; (8001f54 <HAL_RCC_OscConfig+0x630>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	0449      	lsls	r1, r1, #17
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fdd7 	bl	8000a40 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe fdd2 	bl	8000a40 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e047      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	049b      	lsls	r3, r3, #18
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x574>
 8001eb6:	e03f      	b.n	8001f38 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001ebe:	4924      	ldr	r1, [pc, #144]	; (8001f50 <HAL_RCC_OscConfig+0x62c>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fdbc 	bl	8000a40 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fdb7 	bl	8000a40 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e02c      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	049b      	lsls	r3, r3, #18
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x5aa>
 8001eec:	e024      	b.n	8001f38 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e01f      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	025b      	lsls	r3, r3, #9
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d10e      	bne.n	8001f34 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	220f      	movs	r2, #15
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	23f0      	movs	r3, #240	; 0xf0
 8001f28:	039b      	lsls	r3, r3, #14
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b008      	add	sp, #32
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	40021000 	.word	0x40021000
 8001f48:	00001388 	.word	0x00001388
 8001f4c:	efffffff 	.word	0xefffffff
 8001f50:	feffffff 	.word	0xfeffffff
 8001f54:	ffc2ffff 	.word	0xffc2ffff

08001f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b3      	b.n	80020d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_ClockConfig+0x184>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d911      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <HAL_RCC_ClockConfig+0x184>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4393      	bics	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	4b55      	ldr	r3, [pc, #340]	; (80020dc <HAL_RCC_ClockConfig+0x184>)
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_ClockConfig+0x184>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e09a      	b.n	80020d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d015      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2204      	movs	r2, #4
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d006      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 8001fb8:	21e0      	movs	r1, #224	; 0xe0
 8001fba:	00c9      	lsls	r1, r1, #3
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	22f0      	movs	r2, #240	; 0xf0
 8001fc6:	4393      	bics	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d040      	beq.n	8002060 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	029b      	lsls	r3, r3, #10
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d114      	bne.n	800201c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06e      	b.n	80020d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffe:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	049b      	lsls	r3, r3, #18
 8002006:	4013      	ands	r3, r2
 8002008:	d108      	bne.n	800201c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e062      	b.n	80020d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e05b      	b.n	80020d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201c:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2203      	movs	r2, #3
 8002022:	4393      	bics	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002030:	f7fe fd06 	bl	8000a40 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002038:	e009      	b.n	800204e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203a:	f7fe fd01 	bl	8000a40 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_RCC_ClockConfig+0x18c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e042      	b.n	80020d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	220c      	movs	r2, #12
 8002054:	401a      	ands	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	429a      	cmp	r2, r3
 800205e:	d1ec      	bne.n	800203a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_RCC_ClockConfig+0x184>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2201      	movs	r2, #1
 8002066:	4013      	ands	r3, r2
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d211      	bcs.n	8002092 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_ClockConfig+0x184>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	4393      	bics	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_RCC_ClockConfig+0x184>)
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002080:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_RCC_ClockConfig+0x184>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	4013      	ands	r3, r2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e020      	b.n	80020d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2204      	movs	r2, #4
 8002098:	4013      	ands	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_RCC_ClockConfig+0x190>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b0:	f000 f820 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b4:	0001      	movs	r1, r0
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x188>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	220f      	movs	r2, #15
 80020be:	4013      	ands	r3, r2
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x194>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	000a      	movs	r2, r1
 80020c6:	40da      	lsrs	r2, r3
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x198>)
 80020ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7fe fc71 	bl	80009b4 <HAL_InitTick>
  
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b004      	add	sp, #16
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	00001388 	.word	0x00001388
 80020e8:	fffff8ff 	.word	0xfffff8ff
 80020ec:	08002db8 	.word	0x08002db8
 80020f0:	20000000 	.word	0x20000000

080020f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b08f      	sub	sp, #60	; 0x3c
 80020f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020fa:	2314      	movs	r3, #20
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002100:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002102:	c313      	stmia	r3!, {r0, r1, r4}
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800210c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800210e:	c313      	stmia	r3!, {r0, r1, r4}
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
 800211c:	2300      	movs	r3, #0
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	220c      	movs	r2, #12
 8002132:	4013      	ands	r3, r2
 8002134:	2b04      	cmp	r3, #4
 8002136:	d002      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x4a>
 8002138:	2b08      	cmp	r3, #8
 800213a:	d003      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x50>
 800213c:	e02d      	b.n	800219a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002142:	e02d      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	0c9b      	lsrs	r3, r3, #18
 8002148:	220f      	movs	r2, #15
 800214a:	4013      	ands	r3, r2
 800214c:	2214      	movs	r2, #20
 800214e:	18ba      	adds	r2, r7, r2
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	220f      	movs	r2, #15
 800215a:	4013      	ands	r3, r2
 800215c:	1d3a      	adds	r2, r7, #4
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	4013      	ands	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800216c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800216e:	4812      	ldr	r0, [pc, #72]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002170:	f7fd ffca 	bl	8000108 <__udivsi3>
 8002174:	0003      	movs	r3, r0
 8002176:	001a      	movs	r2, r3
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	4353      	muls	r3, r2
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
 800217e:	e009      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002182:	000a      	movs	r2, r1
 8002184:	0152      	lsls	r2, r2, #5
 8002186:	1a52      	subs	r2, r2, r1
 8002188:	0193      	lsls	r3, r2, #6
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	185b      	adds	r3, r3, r1
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002198:	e002      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800219e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b00f      	add	sp, #60	; 0x3c
 80021a8:	bd90      	pop	{r4, r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	08002d98 	.word	0x08002d98
 80021b0:	08002da8 	.word	0x08002da8
 80021b4:	40021000 	.word	0x40021000
 80021b8:	007a1200 	.word	0x007a1200

080021bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	025b      	lsls	r3, r3, #9
 80021d4:	4013      	ands	r3, r2
 80021d6:	d100      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80021d8:	e08e      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2017      	movs	r0, #23
 80021dc:	183b      	adds	r3, r7, r0
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b57      	ldr	r3, [pc, #348]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	055b      	lsls	r3, r3, #21
 80021ea:	4013      	ands	r3, r2
 80021ec:	d110      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b54      	ldr	r3, [pc, #336]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	0549      	lsls	r1, r1, #21
 80021f8:	430a      	orrs	r2, r1
 80021fa:	61da      	str	r2, [r3, #28]
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	055b      	lsls	r3, r3, #21
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	183b      	adds	r3, r7, r0
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4013      	ands	r3, r2
 800221a:	d11a      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221c:	4b49      	ldr	r3, [pc, #292]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	0049      	lsls	r1, r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7fe fc09 	bl	8000a40 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	e008      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002234:	f7fe fc04 	bl	8000a40 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e077      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4013      	ands	r3, r2
 8002250:	d0f0      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	23c0      	movs	r3, #192	; 0xc0
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4013      	ands	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d034      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	23c0      	movs	r3, #192	; 0xc0
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4013      	ands	r3, r2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d02c      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a33      	ldr	r2, [pc, #204]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002280:	6a1a      	ldr	r2, [r3, #32]
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0249      	lsls	r1, r1, #9
 8002288:	430a      	orrs	r2, r1
 800228a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800228c:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002292:	492e      	ldr	r1, [pc, #184]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002294:	400a      	ands	r2, r1
 8002296:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe fbcb 	bl	8000a40 <HAL_GetTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	e009      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fbc6 	bl	8000a40 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4a25      	ldr	r2, [pc, #148]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e038      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022e2:	2317      	movs	r3, #23
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022f2:	4918      	ldr	r1, [pc, #96]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	2203      	movs	r2, #3
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002312:	430a      	orrs	r2, r1
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2220      	movs	r2, #32
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2210      	movs	r2, #16
 8002326:	4393      	bics	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002330:	430a      	orrs	r2, r1
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b006      	add	sp, #24
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	40007000 	.word	0x40007000
 8002348:	fffffcff 	.word	0xfffffcff
 800234c:	fffeffff 	.word	0xfffeffff
 8002350:	00001388 	.word	0x00001388
 8002354:	efffffff 	.word	0xefffffff

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e042      	b.n	80023f0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223d      	movs	r2, #61	; 0x3d
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d107      	bne.n	8002386 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	223c      	movs	r2, #60	; 0x3c
 800237a:	2100      	movs	r1, #0
 800237c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f7fe fa5d 	bl	8000840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223d      	movs	r2, #61	; 0x3d
 800238a:	2102      	movs	r1, #2
 800238c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	0019      	movs	r1, r3
 8002398:	0010      	movs	r0, r2
 800239a:	f000 fa09 	bl	80027b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2246      	movs	r2, #70	; 0x46
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	223e      	movs	r2, #62	; 0x3e
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223f      	movs	r2, #63	; 0x3f
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2240      	movs	r2, #64	; 0x40
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2241      	movs	r2, #65	; 0x41
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2242      	movs	r2, #66	; 0x42
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2243      	movs	r2, #67	; 0x43
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2244      	movs	r2, #68	; 0x44
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2245      	movs	r2, #69	; 0x45
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	223d      	movs	r2, #61	; 0x3d
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e042      	b.n	8002490 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	223d      	movs	r2, #61	; 0x3d
 800240e:	5c9b      	ldrb	r3, [r3, r2]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	223c      	movs	r2, #60	; 0x3c
 800241a:	2100      	movs	r1, #0
 800241c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	0018      	movs	r0, r3
 8002422:	f000 f839 	bl	8002498 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	223d      	movs	r2, #61	; 0x3d
 800242a:	2102      	movs	r1, #2
 800242c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	0019      	movs	r1, r3
 8002438:	0010      	movs	r0, r2
 800243a:	f000 f9b9 	bl	80027b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2246      	movs	r2, #70	; 0x46
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	223e      	movs	r2, #62	; 0x3e
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2241      	movs	r2, #65	; 0x41
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2242      	movs	r2, #66	; 0x42
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2243      	movs	r2, #67	; 0x43
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2244      	movs	r2, #68	; 0x44
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2245      	movs	r2, #69	; 0x45
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	223d      	movs	r2, #61	; 0x3d
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b002      	add	sp, #8
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d124      	bne.n	8002508 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2202      	movs	r2, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d11d      	bne.n	8002508 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2203      	movs	r2, #3
 80024d2:	4252      	negs	r2, r2
 80024d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2203      	movs	r2, #3
 80024e4:	4013      	ands	r3, r2
 80024e6:	d004      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f948 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e007      	b.n	8002502 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f93b 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f947 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2204      	movs	r2, #4
 8002510:	4013      	ands	r3, r2
 8002512:	2b04      	cmp	r3, #4
 8002514:	d125      	bne.n	8002562 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2204      	movs	r2, #4
 800251e:	4013      	ands	r3, r2
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11e      	bne.n	8002562 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2205      	movs	r2, #5
 800252a:	4252      	negs	r2, r2
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	23c0      	movs	r3, #192	; 0xc0
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f91b 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 800254a:	e007      	b.n	800255c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f90e 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0018      	movs	r0, r3
 8002558:	f000 f91a 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2208      	movs	r2, #8
 800256a:	4013      	ands	r3, r2
 800256c:	2b08      	cmp	r3, #8
 800256e:	d124      	bne.n	80025ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2208      	movs	r2, #8
 8002578:	4013      	ands	r3, r2
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11d      	bne.n	80025ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2209      	movs	r2, #9
 8002584:	4252      	negs	r2, r2
 8002586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2204      	movs	r2, #4
 800258c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2203      	movs	r2, #3
 8002596:	4013      	ands	r3, r2
 8002598:	d004      	beq.n	80025a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f8ef 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 80025a2:	e007      	b.n	80025b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f8e2 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 f8ee 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2210      	movs	r2, #16
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d125      	bne.n	8002614 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2210      	movs	r2, #16
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d11e      	bne.n	8002614 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2211      	movs	r2, #17
 80025dc:	4252      	negs	r2, r2
 80025de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2208      	movs	r2, #8
 80025e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	23c0      	movs	r3, #192	; 0xc0
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d004      	beq.n	80025fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 f8c2 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 80025fc:	e007      	b.n	800260e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f000 f8b5 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f000 f8c1 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2201      	movs	r2, #1
 800261c:	4013      	ands	r3, r2
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10f      	bne.n	8002642 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	4013      	ands	r3, r2
 800262c:	2b01      	cmp	r3, #1
 800262e:	d108      	bne.n	8002642 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2202      	movs	r2, #2
 8002636:	4252      	negs	r2, r2
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0018      	movs	r0, r3
 800263e:	f7fd fdef 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	4013      	ands	r3, r2
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d10f      	bne.n	8002670 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	4013      	ands	r3, r2
 800265a:	2b80      	cmp	r3, #128	; 0x80
 800265c:	d108      	bne.n	8002670 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2281      	movs	r2, #129	; 0x81
 8002664:	4252      	negs	r2, r2
 8002666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fb52 	bl	8002d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2240      	movs	r2, #64	; 0x40
 8002678:	4013      	ands	r3, r2
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d10f      	bne.n	800269e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	4013      	ands	r3, r2
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d108      	bne.n	800269e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2241      	movs	r2, #65	; 0x41
 8002692:	4252      	negs	r2, r2
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 f881 	bl	80027a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2220      	movs	r2, #32
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d10f      	bne.n	80026cc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d108      	bne.n	80026cc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2221      	movs	r2, #33	; 0x21
 80026c0:	4252      	negs	r2, r2
 80026c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fb1c 	bl	8002d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	223c      	movs	r2, #60	; 0x3c
 80026e4:	5c9b      	ldrb	r3, [r3, r2]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_OC_ConfigChannel+0x1a>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e03c      	b.n	8002768 <HAL_TIM_OC_ConfigChannel+0x94>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	223c      	movs	r2, #60	; 0x3c
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0c      	cmp	r3, #12
 80026fa:	d027      	beq.n	800274c <HAL_TIM_OC_ConfigChannel+0x78>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d82c      	bhi.n	800275c <HAL_TIM_OC_ConfigChannel+0x88>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d019      	beq.n	800273c <HAL_TIM_OC_ConfigChannel+0x68>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d826      	bhi.n	800275c <HAL_TIM_OC_ConfigChannel+0x88>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_TIM_OC_ConfigChannel+0x48>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d008      	beq.n	800272c <HAL_TIM_OC_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800271a:	e01f      	b.n	800275c <HAL_TIM_OC_ConfigChannel+0x88>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	0011      	movs	r1, r2
 8002724:	0018      	movs	r0, r3
 8002726:	f000 f8af 	bl	8002888 <TIM_OC1_SetConfig>
      break;
 800272a:	e018      	b.n	800275e <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	0011      	movs	r1, r2
 8002734:	0018      	movs	r0, r3
 8002736:	f000 f925 	bl	8002984 <TIM_OC2_SetConfig>
      break;
 800273a:	e010      	b.n	800275e <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	0011      	movs	r1, r2
 8002744:	0018      	movs	r0, r3
 8002746:	f000 f99b 	bl	8002a80 <TIM_OC3_SetConfig>
      break;
 800274a:	e008      	b.n	800275e <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	0011      	movs	r1, r2
 8002754:	0018      	movs	r0, r3
 8002756:	f000 fa13 	bl	8002b80 <TIM_OC4_SetConfig>
      break;
 800275a:	e000      	b.n	800275e <HAL_TIM_OC_ConfigChannel+0x8a>
      break;
 800275c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	223c      	movs	r2, #60	; 0x3c
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a2b      	ldr	r2, [pc, #172]	; (8002870 <TIM_Base_SetConfig+0xc0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_Base_SetConfig+0x20>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <TIM_Base_SetConfig+0xc4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d108      	bne.n	80027e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2270      	movs	r2, #112	; 0x70
 80027d4:	4393      	bics	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <TIM_Base_SetConfig+0xc0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00f      	beq.n	800280a <TIM_Base_SetConfig+0x5a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a21      	ldr	r2, [pc, #132]	; (8002874 <TIM_Base_SetConfig+0xc4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00b      	beq.n	800280a <TIM_Base_SetConfig+0x5a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a20      	ldr	r2, [pc, #128]	; (8002878 <TIM_Base_SetConfig+0xc8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <TIM_Base_SetConfig+0x5a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <TIM_Base_SetConfig+0xcc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <TIM_Base_SetConfig+0x5a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <TIM_Base_SetConfig+0xd0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d108      	bne.n	800281c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <TIM_Base_SetConfig+0xd4>)
 800280e:	4013      	ands	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	4393      	bics	r3, r2
 8002822:	001a      	movs	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <TIM_Base_SetConfig+0xc0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <TIM_Base_SetConfig+0xaa>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0b      	ldr	r2, [pc, #44]	; (800287c <TIM_Base_SetConfig+0xcc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d003      	beq.n	800285a <TIM_Base_SetConfig+0xaa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <TIM_Base_SetConfig+0xd0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d103      	bne.n	8002862 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	615a      	str	r2, [r3, #20]
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b004      	add	sp, #16
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40000400 	.word	0x40000400
 8002878:	40002000 	.word	0x40002000
 800287c:	40014400 	.word	0x40014400
 8002880:	40014800 	.word	0x40014800
 8002884:	fffffcff 	.word	0xfffffcff

08002888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2201      	movs	r2, #1
 8002898:	4393      	bics	r3, r2
 800289a:	001a      	movs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2270      	movs	r2, #112	; 0x70
 80028b6:	4393      	bics	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2203      	movs	r2, #3
 80028be:	4393      	bics	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2202      	movs	r2, #2
 80028d0:	4393      	bics	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a23      	ldr	r2, [pc, #140]	; (8002970 <TIM_OC1_SetConfig+0xe8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <TIM_OC1_SetConfig+0x6e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <TIM_OC1_SetConfig+0xec>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_OC1_SetConfig+0x6e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a21      	ldr	r2, [pc, #132]	; (8002978 <TIM_OC1_SetConfig+0xf0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10c      	bne.n	8002910 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2208      	movs	r2, #8
 80028fa:	4393      	bics	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2204      	movs	r2, #4
 800290c:	4393      	bics	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a17      	ldr	r2, [pc, #92]	; (8002970 <TIM_OC1_SetConfig+0xe8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_OC1_SetConfig+0xa0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <TIM_OC1_SetConfig+0xec>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_OC1_SetConfig+0xa0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <TIM_OC1_SetConfig+0xf0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4a14      	ldr	r2, [pc, #80]	; (800297c <TIM_OC1_SetConfig+0xf4>)
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4a13      	ldr	r2, [pc, #76]	; (8002980 <TIM_OC1_SetConfig+0xf8>)
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b006      	add	sp, #24
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40014400 	.word	0x40014400
 8002978:	40014800 	.word	0x40014800
 800297c:	fffffeff 	.word	0xfffffeff
 8002980:	fffffdff 	.word	0xfffffdff

08002984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2210      	movs	r2, #16
 8002994:	4393      	bics	r3, r2
 8002996:	001a      	movs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <TIM_OC2_SetConfig+0xe0>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <TIM_OC2_SetConfig+0xe4>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2220      	movs	r2, #32
 80029ce:	4393      	bics	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <TIM_OC2_SetConfig+0xe8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10d      	bne.n	8002a02 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	4393      	bics	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	4393      	bics	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <TIM_OC2_SetConfig+0xe8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <TIM_OC2_SetConfig+0x96>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <TIM_OC2_SetConfig+0xec>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d003      	beq.n	8002a1a <TIM_OC2_SetConfig+0x96>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <TIM_OC2_SetConfig+0xf0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d113      	bne.n	8002a42 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <TIM_OC2_SetConfig+0xf4>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <TIM_OC2_SetConfig+0xf8>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	621a      	str	r2, [r3, #32]
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b006      	add	sp, #24
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	ffff8fff 	.word	0xffff8fff
 8002a68:	fffffcff 	.word	0xfffffcff
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40014400 	.word	0x40014400
 8002a74:	40014800 	.word	0x40014800
 8002a78:	fffffbff 	.word	0xfffffbff
 8002a7c:	fffff7ff 	.word	0xfffff7ff

08002a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a33      	ldr	r2, [pc, #204]	; (8002b5c <TIM_OC3_SetConfig+0xdc>)
 8002a90:	401a      	ands	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2270      	movs	r2, #112	; 0x70
 8002aac:	4393      	bics	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <TIM_OC3_SetConfig+0xe0>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <TIM_OC3_SetConfig+0xe4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10d      	bne.n	8002afa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <TIM_OC3_SetConfig+0xe8>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <TIM_OC3_SetConfig+0xec>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <TIM_OC3_SetConfig+0xe4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <TIM_OC3_SetConfig+0x92>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <TIM_OC3_SetConfig+0xf0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_OC3_SetConfig+0x92>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <TIM_OC3_SetConfig+0xf4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d113      	bne.n	8002b3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <TIM_OC3_SetConfig+0xf8>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <TIM_OC3_SetConfig+0xfc>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	fffffeff 	.word	0xfffffeff
 8002b60:	fffffdff 	.word	0xfffffdff
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	fffff7ff 	.word	0xfffff7ff
 8002b6c:	fffffbff 	.word	0xfffffbff
 8002b70:	40014400 	.word	0x40014400
 8002b74:	40014800 	.word	0x40014800
 8002b78:	ffffefff 	.word	0xffffefff
 8002b7c:	ffffdfff 	.word	0xffffdfff

08002b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a26      	ldr	r2, [pc, #152]	; (8002c28 <TIM_OC4_SetConfig+0xa8>)
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <TIM_OC4_SetConfig+0xac>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <TIM_OC4_SetConfig+0xb0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <TIM_OC4_SetConfig+0xb4>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	031b      	lsls	r3, r3, #12
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <TIM_OC4_SetConfig+0xb8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <TIM_OC4_SetConfig+0x70>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <TIM_OC4_SetConfig+0xbc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_OC4_SetConfig+0x70>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <TIM_OC4_SetConfig+0xc0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d109      	bne.n	8002c04 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <TIM_OC4_SetConfig+0xc4>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b006      	add	sp, #24
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	ffffefff 	.word	0xffffefff
 8002c2c:	ffff8fff 	.word	0xffff8fff
 8002c30:	fffffcff 	.word	0xfffffcff
 8002c34:	ffffdfff 	.word	0xffffdfff
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40014400 	.word	0x40014400
 8002c40:	40014800 	.word	0x40014800
 8002c44:	ffffbfff 	.word	0xffffbfff

08002c48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	223c      	movs	r2, #60	; 0x3c
 8002c5a:	5c9b      	ldrb	r3, [r3, r2]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e03e      	b.n	8002ce2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	223c      	movs	r2, #60	; 0x3c
 8002c68:	2101      	movs	r1, #1
 8002c6a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	22ff      	movs	r2, #255	; 0xff
 8002c70:	4393      	bics	r3, r2
 8002c72:	001a      	movs	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002c80:	401a      	ands	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002c8e:	401a      	ands	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002caa:	401a      	ands	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a11      	ldr	r2, [pc, #68]	; (8002cfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002cb8:	401a      	ands	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	223c      	movs	r2, #60	; 0x3c
 8002cdc:	2100      	movs	r1, #0
 8002cde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	fffffcff 	.word	0xfffffcff
 8002cf0:	fffffbff 	.word	0xfffffbff
 8002cf4:	fffff7ff 	.word	0xfffff7ff
 8002cf8:	ffffefff 	.word	0xffffefff
 8002cfc:	ffffdfff 	.word	0xffffdfff
 8002d00:	ffffbfff 	.word	0xffffbfff

08002d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <__libc_init_array>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	2600      	movs	r6, #0
 8002d28:	4d0c      	ldr	r5, [pc, #48]	; (8002d5c <__libc_init_array+0x38>)
 8002d2a:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <__libc_init_array+0x3c>)
 8002d2c:	1b64      	subs	r4, r4, r5
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	42a6      	cmp	r6, r4
 8002d32:	d109      	bne.n	8002d48 <__libc_init_array+0x24>
 8002d34:	2600      	movs	r6, #0
 8002d36:	f000 f821 	bl	8002d7c <_init>
 8002d3a:	4d0a      	ldr	r5, [pc, #40]	; (8002d64 <__libc_init_array+0x40>)
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	; (8002d68 <__libc_init_array+0x44>)
 8002d3e:	1b64      	subs	r4, r4, r5
 8002d40:	10a4      	asrs	r4, r4, #2
 8002d42:	42a6      	cmp	r6, r4
 8002d44:	d105      	bne.n	8002d52 <__libc_init_array+0x2e>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	00b3      	lsls	r3, r6, #2
 8002d4a:	58eb      	ldr	r3, [r5, r3]
 8002d4c:	4798      	blx	r3
 8002d4e:	3601      	adds	r6, #1
 8002d50:	e7ee      	b.n	8002d30 <__libc_init_array+0xc>
 8002d52:	00b3      	lsls	r3, r6, #2
 8002d54:	58eb      	ldr	r3, [r5, r3]
 8002d56:	4798      	blx	r3
 8002d58:	3601      	adds	r6, #1
 8002d5a:	e7f2      	b.n	8002d42 <__libc_init_array+0x1e>
 8002d5c:	08002dc8 	.word	0x08002dc8
 8002d60:	08002dc8 	.word	0x08002dc8
 8002d64:	08002dc8 	.word	0x08002dc8
 8002d68:	08002dcc 	.word	0x08002dcc

08002d6c <memset>:
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	1882      	adds	r2, r0, r2
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d100      	bne.n	8002d76 <memset+0xa>
 8002d74:	4770      	bx	lr
 8002d76:	7019      	strb	r1, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	e7f9      	b.n	8002d70 <memset+0x4>

08002d7c <_init>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr

08002d88 <_fini>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr
